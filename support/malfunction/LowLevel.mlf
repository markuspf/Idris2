(module
  ; read result:
  ;   int ofs, bytes ->
  ;     int 0: empty string
  ;     block/tag0 (int char-at-ofs) (int char-width)
  ;     int 1: decoding error
  ($utf8-read
    (lambda ($ofs $bytes)
      (let
        ($len (- (length.byte $bytes) $ofs))
        (switch $len
          (0 0)  ; nothing left
          (_
            (let ($h (load.byte $bytes $ofs))
              (if (< $h 128)
                ; character encoded as single byte (ascii range)
                (block (tag 0) $h 1)
                (if (< $h 192)
                  ; this is a continuation byte!
                  1  ; decoding error
                  (if (< $h 224)
                    ; character encoded in two bytes
                    (if (< $len 2)
                      1  ; decoding error
                      (block (tag 0)
                        (|
                          (<< (& $h 31) 6)
                          (& (load.byte $bytes (+ $ofs 1)) 63))
                        2))
                    (if (< $h 240)
                      ; character encoded in three bytes
                      (if (< $len 3)
                        1  ; decoding error
                        (block (tag 0)
                          (|(|
                            (<< (& $h 15) 12)
                            (<< (& (load.byte $bytes (+ $ofs 1)) 63) 6))
                            (& (load.byte $bytes (+ $ofs 2)) 63))
                          3))
                      ; character encoded in four bytes
                      (if (< $len 4)
                        1  ; decoding error
                        (block (tag 0)
                          (|(|(|
                            (<< (& $h 7) 18)
                            (<< (& (load.byte $bytes (+ $ofs 1)) 63) 12))
                            (<< (& (load.byte $bytes (+ $ofs 2)) 63) 6))
                            (& (load.byte $bytes (+ $ofs 3)) 63))
                          4))))))))))))

  ($utf8-width
    (lambda ($c)
      (if (< $c 128)
        1
        (if (< $c 2048)
          2
          (if (< $c 65536)
            3
            4)))))

  ($utf8-write
    (lambda ($c $ofs $bytes)
      (switch (apply $utf8-width $c)
        (1
          (store.byte $bytes $ofs $c))
        (2 (seq
          (store.byte $bytes $ofs (| 192 (& (>> $c 6) 31)))
          (store.byte $bytes (+ $ofs 1) (| 128 (& $c 63)))))
        (3 (seq
          (store.byte $bytes $ofs (| 224 (& (>> $c 12) 15)))
          (store.byte $bytes (+ $ofs 1) (| 128 (& (>> $c 6) 63)))
          (store.byte $bytes (+ $ofs 2) (| 128 (& $c 63)))))
        (_ (seq
          (store.byte $bytes $ofs (| 240 (& (>> $c 18) 7)))
          (store.byte $bytes (+ $ofs 1) (| 128 (& (>> $c 12) 63)))
          (store.byte $bytes (+ $ofs 2) (| 128 (& (>> $c 6) 63)))
          (store.byte $bytes (+ $ofs 3) (| 128 (& $c 63))))))))

  ($bytes-length
    (lambda ($bytes)
      (length.byte $bytes)))

  ; must be in the same order as the .mli file
  (export
    $utf8-width
    $utf8-read
    $utf8-write))

; vim: ft=lisp et sw=2 ts=2 sts=2
